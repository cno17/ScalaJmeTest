package monkey.demo.hello

import com.jme3.material.Material
import com.jme3.terrain.geomipmap.TerrainLodControl
import com.jme3.terrain.geomipmap.TerrainQuad
import com.jme3.terrain.geomipmap.lodcalc.DistanceLodCalculator
import com.jme3.terrain.heightmap.AbstractHeightMap
import com.jme3.terrain.heightmap.ImageBasedHeightMap
import com.jme3.texture.Texture.WrapMode
import monkey.util.application.old.MonkeyApp

object HelloTerrainTexture extends MonkeyApp:

  override def simpleInitApp() =
    // flyCam.moveSpeed = 50f

    /* 1. Create terrain material and load four textures into it. */
    val mat_terrain = Material(assetManager, "Common/MatDefs/Terrain/Terrain.j3md")

    /* 1.1) Add ALPHA map (for red-blue-green coded splat textures) */
    mat_terrain.setTexture("Alpha", assetManager.loadTexture("Textures/Terrain/Splat/alphamap.png"))

    /* 1.2) Add GRASS texture into the red layer (Tex1). */
    val grass = assetManager.loadTexture("Textures/Terrain/Splat/grass.jpg")
    grass.setWrap(WrapMode.Repeat)
    mat_terrain.setTexture("Tex1", grass)
    mat_terrain.setFloat("Tex1Scale", 64f)

    /* 1.3) Add DIRT texture into the green layer (Tex2) */
    val dirt = assetManager.loadTexture("Textures/Terrain/Splat/dirt.jpg")
    dirt.setWrap(WrapMode.Repeat)
    mat_terrain.setTexture("Tex2", dirt)
    mat_terrain.setFloat("Tex2Scale", 32f)

    /* 1.4) Add ROAD texture into the blue layer (Tex3) */
    val rock = assetManager.loadTexture("Textures/Terrain/Splat/road.jpg")
    rock.setWrap(WrapMode.Repeat)
    mat_terrain.setTexture("Tex3", rock)
    mat_terrain.setFloat("Tex3Scale", 128f)

    /* 2.a Create a custom height map from an image */
    var heightmap: AbstractHeightMap = null
    val heightMapImage = assetManager.loadTexture("Textures/Terrain/Splat/mountains512.png")
    heightmap = ImageBasedHeightMap(heightMapImage.getImage())

    /* 2.b Create a random height map */
//      HillHeightMap heightmap = null;
//      HillHeightMap.NORMALIZE_RANGE = 100;
//      try {
//          heightmap = new HillHeightMap(513, 1000, 50, 100, (byte) 3);
//      } catch (Exception ex) {
//          ex.printStackTrace();
//      }
    heightmap.load()

    /* 3. We have prepared material and heightmap.
     * Now we create the actual terrain:
     * 3.1) Create a TerrainQuad and name it "my terrain".
     * 3.2) A good value for terrain tiles is 64x64 -- so we supply 64+1=65.
     * 3.3) We prepared a heightmap of size 512x512 -- so we supply 512+1=513.
     * 3.4) As LOD step scale we supply Vector3f(1,1,1).
     * 3.5) We supply the prepared heightmap itself.
     */
    val patchSize = 65
    val terrain = TerrainQuad("my terrain", patchSize, 513, heightmap.getHeightMap())

    /* 4. We give the terrain its material, position & scale it, and attach it. */
    terrain.setMaterial(mat_terrain)
    terrain.setLocalTranslation(0f, -100f, 0f)
    terrain.setLocalScale(2f, 1f, 2f)
    rootNode.attachChild(terrain)

    /* 5. The LOD (level of detail) depends on were the camera is: */
    val control = TerrainLodControl(terrain, getCamera())
    control.setLodCalculator(DistanceLodCalculator(patchSize, 2.7f)) // patch size, and a multiplier
    terrain.addControl(control)
