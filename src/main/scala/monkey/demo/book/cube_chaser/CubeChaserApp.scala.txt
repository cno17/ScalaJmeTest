package monkey.demo.cube_chaser

import com.jme3.app.SimpleApplication
import com.jme3.collision.CollisionResults
import com.jme3.material.Material
import com.jme3.math.ColorRGBA
import com.jme3.math.FastMath
import com.jme3.math.Ray
import com.jme3.math.Vector3f
import com.jme3.scene.Geometry
import com.jme3.scene.shape.Box

/**
 * This demo uses the simpleUpdate() loop to determine which cube 
 * the player (the camera) looks at. When the player is closer than 10 wu, 
 * the cube moves further away.
 * The loop uses a ray casting algorythm to measure the distance.
 */
object CubeChaser2 {
  private val mesh = new Box(1, 1, 1)
  /** Start the jMonkeyEngine application */
  def main(args: Array[String]): Unit = {
    val app = new CubeChaser2
    app.start()
  }
}

class CubeChaser2 extends SimpleApplication {
  private val ray = new Ray
  override /** initialize the scene here */
  def simpleInitApp(): Unit = {
    flyCam.setMoveSpeed(100f)
    makeCubes(40)
  }
  private def makeCubes(number: Int): Unit = {
    for (i <- 0 until number) {
      // randomize 3D coordinates
      val loc = new Vector3f(FastMath.nextRandomInt(-20, 20), FastMath.nextRandomInt(-20, 20), FastMath.nextRandomInt(-20, 20))
      rootNode.attachChild(myBox("Cube" + i, loc, ColorRGBA.randomColor))
    }
  }
  def myBox(name: String, loc: Vector3f, color: ColorRGBA): Geometry = {
    val geom = new Geometry(name, CubeChaser2.mesh)
    val mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md")
    mat.setColor("Color", color)
    geom.setMaterial(mat)
    geom.setLocalTranslation(loc)
    geom
  }
  override /** Interact with update loop here */
  def simpleUpdate(tpf: Float): Unit = {
    // 1. Reset results list.
    val results = new CollisionResults
    // 2. Aim the ray from camera location in camera direction.
    ray.setOrigin(cam.getLocation)
    ray.setDirection(cam.getDirection)
    // 3. Collect intersections between ray and all nodes in results list.
    rootNode.collideWith(ray, results)
    // 4. Use the result
    if (results.size > 0) {
      // The closest result is the target that the player picked:
      val target = results.getClosestCollision.getGeometry
      // if camera closer than 10...
      if (cam.getLocation.distance(target.getLocalTranslation) < 10) {
        // ... move the cube in the direction that camera is facing
        target.move(cam.getDirection)
      }
    }
  }
}